--// Services
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")

-- Wait for LocalPlayer to initialize
local LocalPlayer
repeat
    LocalPlayer = Players.LocalPlayer
    task.wait()
until LocalPlayer

--// User Configuration from loader
local webhook = getgenv().webhook or ""
local targetPets = getgenv().TargetPetNames or {}

--// Visited Job Tracking
local visitedJobIds = {[game.JobId] = true}
local hops = 0
local maxHopsBeforeReset = 50

--// Teleport Fail Handling
local teleportFails = 0
local maxTeleportRetries = 3

--// Found Pet Cache
local detectedPets = {}
local webhookSent = false
local stopHopping = false

TeleportService.TeleportInitFailed:Connect(function(_, result)
    teleportFails += 1
    if result == Enum.TeleportResult.GameFull then
        warn("‚ö†Ô∏è Game full. Retrying teleport...")
    elseif result == Enum.TeleportResult.Unauthorized then
        warn("‚ùå Unauthorized/private server. Blacklisting and retrying...")
        visitedJobIds[game.JobId] = true
    else
        warn("‚ùå Other teleport error:", result)
    end

    if teleportFails >= maxTeleportRetries then
        warn("‚ö†Ô∏è Too many teleport fails. Forcing fresh server...")
        teleportFails = 0
        task.wait(1)
        TeleportService:Teleport(game.PlaceId)
    else
        task.wait(1)
        serverHop()
    end
end)

--// ESP Function
local function addESP(targetModel)
    if targetModel:FindFirstChild("PetESP") then return end
    local Billboard = Instance.new("BillboardGui")
    Billboard.Name = "PetESP"
    Billboard.Adornee = targetModel
    Billboard.Size = UDim2.new(0, 100, 0, 30)
    Billboard.StudsOffset = Vector3.new(0, 3, 0)
    Billboard.AlwaysOnTop = true
    Billboard.Parent = targetModel

    local Label = Instance.new("TextLabel")
    Label.Size = UDim2.new(1, 0, 1, 0)
    Label.BackgroundTransparency = 1
    Label.Text = "üéØ Target Pet"
    Label.TextColor3 = Color3.fromRGB(255, 0, 0)
    Label.TextStrokeTransparency = 0.5
    Label.Font = Enum.Font.SourceSansBold
    Label.TextScaled = true
    Label.Parent = Billboard
end

--// Webhook Function
local function sendWebhook(foundPets, jobId)
    if webhook == "" then
        warn("‚ö†Ô∏è Webhook is empty, skipping notification.")
        return
    end

    local petCounts = {}
    for _, pet in ipairs(foundPets) do
        if pet then
            petCounts[pet] = (petCounts[pet] or 0) + 1
        end
    end

    local formattedPets = {}
    for petName, count in pairs(petCounts) do
        table.insert(formattedPets, count > 1 and petName .. " x" .. count or petName)
    end

    local jsonData = HttpService:JSONEncode({
        ["content"] = "@everyone üö® SECRET PET DETECTED!",
        ["embeds"] = {{
            ["title"] = "üß† Pet(s) Found!",
            ["description"] = "Brainrot-worthy pet detected in the server!",
            ["fields"] = {
                { ["name"] = "User", ["value"] = LocalPlayer.Name },
                { ["name"] = "Found Pet(s)", ["value"] = table.concat(formattedPets, "\n") },
                { ["name"] = "Server JobId", ["value"] = jobId },
                { ["name"] = "Time", ["value"] = os.date("%Y-%m-%d %H:%M:%S") }
            },
            ["color"] = 0xFF00FF
        }}
    })

    local req = http_request or request or syn and syn.request
    if req then
        local success, err = pcall(function()
            req({
                Url = webhook,
                Method = "POST",
                Headers = { ["Content-Type"] = "application/json" },
                Body = jsonData
            })
        end)
        if success then
            print("‚úÖ Webhook sent.")
        else
            warn("‚ùå Failed to send webhook:", err)
        end
    else
        warn("‚ùå Executor doesn't support HTTP requests.")
    end
end

--// Pet Detection Function
local function checkForPets()
    local found = {}
    for _, obj in pairs(workspace:GetDescendants()) do
        if obj:IsA("Model") then
            local nameLower = string.lower(obj.Name)
            for _, target in pairs(targetPets) do
                if string.find(nameLower, string.lower(target)) and not obj:FindFirstChild("PetESP") then
                    addESP(obj)
                    table.insert(found, obj.Name)
                    stopHopping = true
                    break
                end
            end
        end
    end
    return found
end

--// Live Detection for Pets
workspace.DescendantAdded:Connect(function(obj)
    task.wait(0.25)
    if obj:IsA("Model") then
        local nameLower = string.lower(obj.Name)
        for _, target in pairs(targetPets) do
            if string.find(nameLower, string.lower(target)) and not obj:FindFirstChild("PetESP") then
                if not detectedPets[obj.Name] then
                    detectedPets[obj.Name] = true
                    addESP(obj)
                    print("üéØ New pet appeared:", obj.Name)
                    stopHopping = true
                    if not webhookSent then
                        sendWebhook({obj.Name}, game.JobId)
                        webhookSent = true
                    end
                end
                break
            end
        end
    end
end)
